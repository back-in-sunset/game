// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: rpc/comment.proto

package comment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Comment_AddComment_FullMethodName        = "/commentclient.Comment/AddComment"
	Comment_DeleteComment_FullMethodName     = "/commentclient.Comment/DeleteComment"
	Comment_GetComment_FullMethodName        = "/commentclient.Comment/GetComment"
	Comment_GetCommentList_FullMethodName    = "/commentclient.Comment/GetCommentList"
	Comment_LikeComment_FullMethodName       = "/commentclient.Comment/LikeComment"
	Comment_UnLikeComment_FullMethodName     = "/commentclient.Comment/UnLikeComment"
	Comment_ReportComment_FullMethodName     = "/commentclient.Comment/ReportComment"
	Comment_BlockComment_FullMethodName      = "/commentclient.Comment/BlockComment"
	Comment_UnBlockComment_FullMethodName    = "/commentclient.Comment/UnBlockComment"
	Comment_AuditComment_FullMethodName      = "/commentclient.Comment/AuditComment"
	Comment_UnAuditComment_FullMethodName    = "/commentclient.Comment/UnAuditComment"
	Comment_SetCommentAttrs_FullMethodName   = "/commentclient.Comment/SetCommentAttrs"
	Comment_UnSetCommentAttrs_FullMethodName = "/commentclient.Comment/UnSetCommentAttrs"
)

// CommentClient is the client API for Comment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 评论服务
type CommentClient interface {
	// 添加评论
	AddComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error)
	// 删除评论
	DeleteComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error)
	// 获取评论
	GetComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error)
	// 获取评论列表
	GetCommentList(ctx context.Context, in *CommentListRequest, opts ...grpc.CallOption) (*CommentListResponse, error)
	// 评论点赞
	LikeComment(ctx context.Context, in *LikeCommentRequest, opts ...grpc.CallOption) (*LikeCommentResponse, error)
	// 评论取消点赞
	UnLikeComment(ctx context.Context, in *UnLikeCommentRequest, opts ...grpc.CallOption) (*UnLikeCommentResponse, error)
	// 评论举报
	ReportComment(ctx context.Context, in *ReportCommentRequest, opts ...grpc.CallOption) (*ReportCommentResponse, error)
	// 评论屏蔽
	BlockComment(ctx context.Context, in *BlockCommentRequest, opts ...grpc.CallOption) (*BlockCommentResponse, error)
	// 评论取消屏蔽
	UnBlockComment(ctx context.Context, in *UnBlockCommentRequest, opts ...grpc.CallOption) (*UnBlockCommentResponse, error)
	// 通过评论审核
	AuditComment(ctx context.Context, in *AuditCommentRequest, opts ...grpc.CallOption) (*AuditCommentResponse, error)
	// 评论取消审核
	UnAuditComment(ctx context.Context, in *UnAuditCommentRequest, opts ...grpc.CallOption) (*UnAuditCommentResponse, error)
	// 评论置顶
	SetCommentAttrs(ctx context.Context, in *SetCommentAttrsRequest, opts ...grpc.CallOption) (*SetCommentAttrsResponse, error)
	// 评论取消置顶
	UnSetCommentAttrs(ctx context.Context, in *UnSetCommentAttrsRequest, opts ...grpc.CallOption) (*UnSetCommentAttrsResponse, error)
}

type commentClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentClient(cc grpc.ClientConnInterface) CommentClient {
	return &commentClient{cc}
}

func (c *commentClient) AddComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, Comment_AddComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) DeleteComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, Comment_DeleteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, Comment_GetComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetCommentList(ctx context.Context, in *CommentListRequest, opts ...grpc.CallOption) (*CommentListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentListResponse)
	err := c.cc.Invoke(ctx, Comment_GetCommentList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) LikeComment(ctx context.Context, in *LikeCommentRequest, opts ...grpc.CallOption) (*LikeCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeCommentResponse)
	err := c.cc.Invoke(ctx, Comment_LikeComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) UnLikeComment(ctx context.Context, in *UnLikeCommentRequest, opts ...grpc.CallOption) (*UnLikeCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnLikeCommentResponse)
	err := c.cc.Invoke(ctx, Comment_UnLikeComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) ReportComment(ctx context.Context, in *ReportCommentRequest, opts ...grpc.CallOption) (*ReportCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportCommentResponse)
	err := c.cc.Invoke(ctx, Comment_ReportComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) BlockComment(ctx context.Context, in *BlockCommentRequest, opts ...grpc.CallOption) (*BlockCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockCommentResponse)
	err := c.cc.Invoke(ctx, Comment_BlockComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) UnBlockComment(ctx context.Context, in *UnBlockCommentRequest, opts ...grpc.CallOption) (*UnBlockCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnBlockCommentResponse)
	err := c.cc.Invoke(ctx, Comment_UnBlockComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) AuditComment(ctx context.Context, in *AuditCommentRequest, opts ...grpc.CallOption) (*AuditCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuditCommentResponse)
	err := c.cc.Invoke(ctx, Comment_AuditComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) UnAuditComment(ctx context.Context, in *UnAuditCommentRequest, opts ...grpc.CallOption) (*UnAuditCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnAuditCommentResponse)
	err := c.cc.Invoke(ctx, Comment_UnAuditComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) SetCommentAttrs(ctx context.Context, in *SetCommentAttrsRequest, opts ...grpc.CallOption) (*SetCommentAttrsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCommentAttrsResponse)
	err := c.cc.Invoke(ctx, Comment_SetCommentAttrs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) UnSetCommentAttrs(ctx context.Context, in *UnSetCommentAttrsRequest, opts ...grpc.CallOption) (*UnSetCommentAttrsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnSetCommentAttrsResponse)
	err := c.cc.Invoke(ctx, Comment_UnSetCommentAttrs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServer is the server API for Comment service.
// All implementations must embed UnimplementedCommentServer
// for forward compatibility.
//
// 评论服务
type CommentServer interface {
	// 添加评论
	AddComment(context.Context, *CommentRequest) (*CommentResponse, error)
	// 删除评论
	DeleteComment(context.Context, *CommentRequest) (*CommentResponse, error)
	// 获取评论
	GetComment(context.Context, *CommentRequest) (*CommentResponse, error)
	// 获取评论列表
	GetCommentList(context.Context, *CommentListRequest) (*CommentListResponse, error)
	// 评论点赞
	LikeComment(context.Context, *LikeCommentRequest) (*LikeCommentResponse, error)
	// 评论取消点赞
	UnLikeComment(context.Context, *UnLikeCommentRequest) (*UnLikeCommentResponse, error)
	// 评论举报
	ReportComment(context.Context, *ReportCommentRequest) (*ReportCommentResponse, error)
	// 评论屏蔽
	BlockComment(context.Context, *BlockCommentRequest) (*BlockCommentResponse, error)
	// 评论取消屏蔽
	UnBlockComment(context.Context, *UnBlockCommentRequest) (*UnBlockCommentResponse, error)
	// 通过评论审核
	AuditComment(context.Context, *AuditCommentRequest) (*AuditCommentResponse, error)
	// 评论取消审核
	UnAuditComment(context.Context, *UnAuditCommentRequest) (*UnAuditCommentResponse, error)
	// 评论置顶
	SetCommentAttrs(context.Context, *SetCommentAttrsRequest) (*SetCommentAttrsResponse, error)
	// 评论取消置顶
	UnSetCommentAttrs(context.Context, *UnSetCommentAttrsRequest) (*UnSetCommentAttrsResponse, error)
	mustEmbedUnimplementedCommentServer()
}

// UnimplementedCommentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommentServer struct{}

func (UnimplementedCommentServer) AddComment(context.Context, *CommentRequest) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedCommentServer) DeleteComment(context.Context, *CommentRequest) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedCommentServer) GetComment(context.Context, *CommentRequest) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComment not implemented")
}
func (UnimplementedCommentServer) GetCommentList(context.Context, *CommentListRequest) (*CommentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentList not implemented")
}
func (UnimplementedCommentServer) LikeComment(context.Context, *LikeCommentRequest) (*LikeCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeComment not implemented")
}
func (UnimplementedCommentServer) UnLikeComment(context.Context, *UnLikeCommentRequest) (*UnLikeCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLikeComment not implemented")
}
func (UnimplementedCommentServer) ReportComment(context.Context, *ReportCommentRequest) (*ReportCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportComment not implemented")
}
func (UnimplementedCommentServer) BlockComment(context.Context, *BlockCommentRequest) (*BlockCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockComment not implemented")
}
func (UnimplementedCommentServer) UnBlockComment(context.Context, *UnBlockCommentRequest) (*UnBlockCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBlockComment not implemented")
}
func (UnimplementedCommentServer) AuditComment(context.Context, *AuditCommentRequest) (*AuditCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuditComment not implemented")
}
func (UnimplementedCommentServer) UnAuditComment(context.Context, *UnAuditCommentRequest) (*UnAuditCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnAuditComment not implemented")
}
func (UnimplementedCommentServer) SetCommentAttrs(context.Context, *SetCommentAttrsRequest) (*SetCommentAttrsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCommentAttrs not implemented")
}
func (UnimplementedCommentServer) UnSetCommentAttrs(context.Context, *UnSetCommentAttrsRequest) (*UnSetCommentAttrsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnSetCommentAttrs not implemented")
}
func (UnimplementedCommentServer) mustEmbedUnimplementedCommentServer() {}
func (UnimplementedCommentServer) testEmbeddedByValue()                 {}

// UnsafeCommentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentServer will
// result in compilation errors.
type UnsafeCommentServer interface {
	mustEmbedUnimplementedCommentServer()
}

func RegisterCommentServer(s grpc.ServiceRegistrar, srv CommentServer) {
	// If the following call pancis, it indicates UnimplementedCommentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Comment_ServiceDesc, srv)
}

func _Comment_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_AddComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).AddComment(ctx, req.(*CommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).DeleteComment(ctx, req.(*CommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_GetComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetComment(ctx, req.(*CommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_GetCommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetCommentList(ctx, req.(*CommentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_LikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).LikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_LikeComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).LikeComment(ctx, req.(*LikeCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_UnLikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLikeCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).UnLikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_UnLikeComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).UnLikeComment(ctx, req.(*UnLikeCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_ReportComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).ReportComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_ReportComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).ReportComment(ctx, req.(*ReportCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_BlockComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).BlockComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_BlockComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).BlockComment(ctx, req.(*BlockCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_UnBlockComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnBlockCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).UnBlockComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_UnBlockComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).UnBlockComment(ctx, req.(*UnBlockCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_AuditComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).AuditComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_AuditComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).AuditComment(ctx, req.(*AuditCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_UnAuditComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnAuditCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).UnAuditComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_UnAuditComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).UnAuditComment(ctx, req.(*UnAuditCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_SetCommentAttrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCommentAttrsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).SetCommentAttrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_SetCommentAttrs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).SetCommentAttrs(ctx, req.(*SetCommentAttrsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_UnSetCommentAttrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSetCommentAttrsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).UnSetCommentAttrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_UnSetCommentAttrs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).UnSetCommentAttrs(ctx, req.(*UnSetCommentAttrsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Comment_ServiceDesc is the grpc.ServiceDesc for Comment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Comment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commentclient.Comment",
	HandlerType: (*CommentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddComment",
			Handler:    _Comment_AddComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _Comment_DeleteComment_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _Comment_GetComment_Handler,
		},
		{
			MethodName: "GetCommentList",
			Handler:    _Comment_GetCommentList_Handler,
		},
		{
			MethodName: "LikeComment",
			Handler:    _Comment_LikeComment_Handler,
		},
		{
			MethodName: "UnLikeComment",
			Handler:    _Comment_UnLikeComment_Handler,
		},
		{
			MethodName: "ReportComment",
			Handler:    _Comment_ReportComment_Handler,
		},
		{
			MethodName: "BlockComment",
			Handler:    _Comment_BlockComment_Handler,
		},
		{
			MethodName: "UnBlockComment",
			Handler:    _Comment_UnBlockComment_Handler,
		},
		{
			MethodName: "AuditComment",
			Handler:    _Comment_AuditComment_Handler,
		},
		{
			MethodName: "UnAuditComment",
			Handler:    _Comment_UnAuditComment_Handler,
		},
		{
			MethodName: "SetCommentAttrs",
			Handler:    _Comment_SetCommentAttrs_Handler,
		},
		{
			MethodName: "UnSetCommentAttrs",
			Handler:    _Comment_UnSetCommentAttrs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/comment.proto",
}
