// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	commentSubject0FieldNames          = builder.RawFieldNames(&CommentSubject0{})
	commentSubject0Rows                = strings.Join(commentSubject0FieldNames, ",")
	commentSubject0RowsExpectAutoSet   = strings.Join(stringx.Remove(commentSubject0FieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	commentSubject0RowsWithPlaceHolder = strings.Join(stringx.Remove(commentSubject0FieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCommentSubject0IdPrefix                     = "cache:commentSubject0:id:"
	cacheCommentSubject0StateAttrsMemberIdPrefix     = "cache:commentSubject0:state:attrs:memberId:"
	cacheCommentSubject0StateAttrsObjIdObjTypePrefix = "cache:commentSubject0:state:attrs:objId:objType:"
)

type (
	commentSubject0Model interface {
		Insert(ctx context.Context, data *CommentSubject0) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*CommentSubject0, error)
		FindOneByStateAttrsMemberId(ctx context.Context, state uint64, attrs int64, memberId uint64) (*CommentSubject0, error)
		FindOneByStateAttrsObjIdObjType(ctx context.Context, state uint64, attrs int64, objId uint64, objType uint64) (*CommentSubject0, error)
		Update(ctx context.Context, data *CommentSubject0) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultCommentSubject0Model struct {
		sqlc.CachedConn
		table string
	}

	CommentSubject0 struct {
		Id        uint64    `db:"id"`
		ObjId     uint64    `db:"obj_id"`     // 评论对象ID 使用唯一id的话不用type联合主键
		ObjType   uint64    `db:"obj_type"`   // 评论对象类型
		MemberId  uint64    `db:"member_id"`  // 作者用户ID
		Count     int64     `db:"count"`      // 评论总数
		RootCount int64     `db:"root_count"` // 根评论总数
		AllCount  int64     `db:"all_count"`  // 所有评论+回复总数
		State     uint64    `db:"state"`      // 0-正常, 1-隐藏
		Attrs     int64     `db:"attrs"`      // 属性(bit 0-运营置顶, 1-owner置顶 2-大数据)
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newCommentSubject0Model(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultCommentSubject0Model {
	return &defaultCommentSubject0Model{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`comment_subject_0`",
	}
}

func (m *defaultCommentSubject0Model) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	commentSubject0IdKey := fmt.Sprintf("%s%v", cacheCommentSubject0IdPrefix, id)
	commentSubject0StateAttrsMemberIdKey := fmt.Sprintf("%s%v:%v:%v", cacheCommentSubject0StateAttrsMemberIdPrefix, data.State, data.Attrs, data.MemberId)
	commentSubject0StateAttrsObjIdObjTypeKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheCommentSubject0StateAttrsObjIdObjTypePrefix, data.State, data.Attrs, data.ObjId, data.ObjType)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, commentSubject0IdKey, commentSubject0StateAttrsMemberIdKey, commentSubject0StateAttrsObjIdObjTypeKey)
	return err
}

func (m *defaultCommentSubject0Model) FindOne(ctx context.Context, id uint64) (*CommentSubject0, error) {
	commentSubject0IdKey := fmt.Sprintf("%s%v", cacheCommentSubject0IdPrefix, id)
	var resp CommentSubject0
	err := m.QueryRowCtx(ctx, &resp, commentSubject0IdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", commentSubject0Rows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentSubject0Model) FindOneByStateAttrsMemberId(ctx context.Context, state uint64, attrs int64, memberId uint64) (*CommentSubject0, error) {
	commentSubject0StateAttrsMemberIdKey := fmt.Sprintf("%s%v:%v:%v", cacheCommentSubject0StateAttrsMemberIdPrefix, state, attrs, memberId)
	var resp CommentSubject0
	err := m.QueryRowIndexCtx(ctx, &resp, commentSubject0StateAttrsMemberIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `state` = ? and `attrs` = ? and `member_id` = ? limit 1", commentSubject0Rows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, state, attrs, memberId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentSubject0Model) FindOneByStateAttrsObjIdObjType(ctx context.Context, state uint64, attrs int64, objId uint64, objType uint64) (*CommentSubject0, error) {
	commentSubject0StateAttrsObjIdObjTypeKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheCommentSubject0StateAttrsObjIdObjTypePrefix, state, attrs, objId, objType)
	var resp CommentSubject0
	err := m.QueryRowIndexCtx(ctx, &resp, commentSubject0StateAttrsObjIdObjTypeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `state` = ? and `attrs` = ? and `obj_id` = ? and `obj_type` = ? limit 1", commentSubject0Rows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, state, attrs, objId, objType); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentSubject0Model) Insert(ctx context.Context, data *CommentSubject0) (sql.Result, error) {
	commentSubject0IdKey := fmt.Sprintf("%s%v", cacheCommentSubject0IdPrefix, data.Id)
	commentSubject0StateAttrsMemberIdKey := fmt.Sprintf("%s%v:%v:%v", cacheCommentSubject0StateAttrsMemberIdPrefix, data.State, data.Attrs, data.MemberId)
	commentSubject0StateAttrsObjIdObjTypeKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheCommentSubject0StateAttrsObjIdObjTypePrefix, data.State, data.Attrs, data.ObjId, data.ObjType)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, commentSubject0RowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ObjId, data.ObjType, data.MemberId, data.Count, data.RootCount, data.AllCount, data.State, data.Attrs)
	}, commentSubject0IdKey, commentSubject0StateAttrsMemberIdKey, commentSubject0StateAttrsObjIdObjTypeKey)
	return ret, err
}

func (m *defaultCommentSubject0Model) Update(ctx context.Context, newData *CommentSubject0) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	commentSubject0IdKey := fmt.Sprintf("%s%v", cacheCommentSubject0IdPrefix, data.Id)
	commentSubject0StateAttrsMemberIdKey := fmt.Sprintf("%s%v:%v:%v", cacheCommentSubject0StateAttrsMemberIdPrefix, data.State, data.Attrs, data.MemberId)
	commentSubject0StateAttrsObjIdObjTypeKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheCommentSubject0StateAttrsObjIdObjTypePrefix, data.State, data.Attrs, data.ObjId, data.ObjType)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, commentSubject0RowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ObjId, newData.ObjType, newData.MemberId, newData.Count, newData.RootCount, newData.AllCount, newData.State, newData.Attrs, newData.Id)
	}, commentSubject0IdKey, commentSubject0StateAttrsMemberIdKey, commentSubject0StateAttrsObjIdObjTypeKey)
	return err
}

func (m *defaultCommentSubject0Model) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCommentSubject0IdPrefix, primary)
}

func (m *defaultCommentSubject0Model) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", commentSubject0Rows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCommentSubject0Model) tableName() string {
	return m.table
}
