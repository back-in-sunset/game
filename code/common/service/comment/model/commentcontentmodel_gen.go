// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0-alpha

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	commentContentFieldNames          = builder.RawFieldNames(&CommentContent{})
	commentContentRows                = strings.Join(commentContentFieldNames, ",")
	commentContentRowsExpectAutoSet   = strings.Join(stringx.Remove(commentContentFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	commentContentRowsWithPlaceHolder = strings.Join(stringx.Remove(commentContentFieldNames, "`comment_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCommentContentCommentIDPrefix = "cache:commentContent:commentID:"
)

type (
	commentContentModel interface {
		Insert(ctx context.Context, data *CommentContent) (sql.Result, error)
		FindOne(ctx context.Context, commentID int64) (*CommentContent, error)
		Update(ctx context.Context, data *CommentContent) error
		Delete(ctx context.Context, commentID int64) error
	}

	defaultCommentContentModel struct {
		sqlc.CachedConn
		table string
	}

	CommentContent struct {
		CommentID   int64     `db:"comment_id"`    // 同评论indx_id
		ObjID       int64     `db:"obj_id"`        // 评论对象ID使用唯一id的话不用type联合主键
		AtMemberIDs string    `db:"at_member_ids"` // at用户ID列表
		Ip          string    `db:"ip"`            // 评论IP
		Platform    int64     `db:"platform"`      // 评论平台
		Device      string    `db:"device"`        // 评论设备
		Message     string    `db:"message"`       // 评论内容
		Meta        string    `db:"meta"`          // 评论元数据 背景 字体
		CreatedAt   time.Time `db:"created_at"`
		UpdatedAt   time.Time `db:"updated_at"`
	}
)

func newCommentContentModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultCommentContentModel {
	return &defaultCommentContentModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`comment_content`",
	}
}

func (m *defaultCommentContentModel) Delete(ctx context.Context, commentID int64) error {
	commentContentCommentIDKey := fmt.Sprintf("%s%v", cacheCommentContentCommentIDPrefix, commentID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `comment_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, commentID)
	}, commentContentCommentIDKey)
	return err
}

func (m *defaultCommentContentModel) FindOne(ctx context.Context, commentID int64) (*CommentContent, error) {
	commentContentCommentIDKey := fmt.Sprintf("%s%v", cacheCommentContentCommentIDPrefix, commentID)
	var resp CommentContent
	err := m.QueryRowCtx(ctx, &resp, commentContentCommentIDKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `comment_id` = ? limit 1", commentContentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, commentID)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentContentModel) Insert(ctx context.Context, data *CommentContent) (sql.Result, error) {
	commentContentCommentIDKey := fmt.Sprintf("%s%v", cacheCommentContentCommentIDPrefix, data.CommentID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, commentContentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CommentID, data.ObjID, data.AtMemberIDs, data.Ip, data.Platform, data.Device, data.Message, data.Meta)
	}, commentContentCommentIDKey)
	return ret, err
}

func (m *defaultCommentContentModel) Update(ctx context.Context, data *CommentContent) error {
	commentContentCommentIDKey := fmt.Sprintf("%s%v", cacheCommentContentCommentIDPrefix, data.CommentID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `comment_id` = ?", m.table, commentContentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ObjID, data.AtMemberIDs, data.Ip, data.Platform, data.Device, data.Message, data.Meta, data.CommentID)
	}, commentContentCommentIDKey)
	return err
}

func (m *defaultCommentContentModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCommentContentCommentIDPrefix, primary)
}

func (m *defaultCommentContentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `comment_id` = ? limit 1", commentContentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCommentContentModel) tableName() string {
	return m.table
}
